#+TITLE: apm::apm benchmark

* Setup

We start by compiling the =tapm_benchmark= target in release mode. We
will first remove any build directory to make sure no artifacts exist.

#+begin_src sh :results output :exports both :cache yes
rm -rf tmp/build/release
meson setup --buildtype=release tmp/build/release ..
meson compile -C tmp/build/release apm_benchmark
#+end_src

#+RESULTS[2b8fbe894100a2656936a3a97055dbce23d75102]:
#+begin_example
The Meson build system
Version: 0.60.1
Source dir: /home/adbjesus/Workspace/Research/code/apm
Build dir: /home/adbjesus/Workspace/Research/code/apm/notebooks/tmp/build/release
Build type: native build
Project name: apm
Project version: 0.1
C++ compiler for the host machine: c++ (gcc 11.1.0 "c++ (GCC) 11.1.0")
C++ linker for the host machine: c++ ld.bfd 2.36.1
Host machine cpu family: x86_64
Host machine cpu: x86_64
Found pkg-config: /usr/bin/pkg-config (1.8.0)
Run-time dependency benchmark found: YES 1.6.0
Run-time dependency threads found: YES
Build targets in project: 2

apm 0.1

  User defined options
    buildtype: release

Found ninja-1.10.2 at /usr/bin/ninja
ninja: Entering directory `/home/adbjesus/Workspace/Research/code/apm/notebooks/tmp/build/release'
[1/2] Compiling C++ object apm_benchmark.p/bench_apm_benchmark.cpp.o
[2/2] Linking target apm_benchmark
#+end_example

* Run benchmark

All looks good, so we move on to running the benchmark. Since we want
our output in csv for later processing we use the
=--benchmark_format=csv= flag.

#+name: bench_csv
#+begin_src sh :results output :exports both :cache yes
./tmp/build/release/apm_benchmark --benchmark_format=csv
#+end_src

#+RESULTS[9ee258f2a64ce6787a423c612c0306ff173d2c7a]: bench_csv
#+begin_example
name,iterations,real_time,cpu_time,time_unit,bytes_per_second,items_per_second,label,error_occurred,error_message
"BM_greedy_model/10/10/4",383555,1839.76,1836.75,ns,,,,,
"BM_greedy_model/100/10/4",36168,19177.2,19138.5,ns,,,,,
"BM_greedy_model/1000/10/4",3503,200429,199991,ns,,,,,
"BM_greedy_model/10000/10/4",309,2.27588e+06,2.27188e+06,ns,,,,,
"BM_greedy_model/100000/10/4",23,3.02019e+07,3.01398e+07,ns,,,,,
"BM_greedy_model/10/100/4",123670,5737.19,5726.83,ns,,,,,
"BM_greedy_model/100/100/4",24542,28669.8,28654.1,ns,,,,,
"BM_greedy_model/1000/100/4",3285,215017,214909,ns,,,,,
"BM_greedy_model/10000/100/4",317,2.2342e+06,2.23295e+06,ns,,,,,
"BM_greedy_model/100000/100/4",24,2.93265e+07,2.92922e+07,ns,,,,,
"BM_greedy_model/10/1000/4",17592,39496.7,39475.8,ns,,,,,
"BM_greedy_model/100/1000/4",7919,89440.3,89393.7,ns,,,,,
"BM_greedy_model/1000/1000/4",1988,353837,353626,ns,,,,,
"BM_greedy_model/10000/1000/4",279,2.51532e+06,2.51375e+06,ns,,,,,
"BM_greedy_model/100000/1000/4",25,2.85e+07,2.84624e+07,ns,,,,,
"BM_greedy_model/10/10/1",387634,1812.98,1812.06,ns,,,,,
"BM_greedy_model/100/10/1",34943,20254.4,20243.1,ns,,,,,
"BM_greedy_model/1000/10/1",3386,206359,206243,ns,,,,,
"BM_greedy_model/10000/10/1",299,2.32875e+06,2.32726e+06,ns,,,,,
"BM_greedy_model/100000/10/1",22,3.10298e+07,3.09919e+07,ns,,,,,
"BM_greedy_model/10/100/1",133242,5288.93,5285.8,ns,,,,,
"BM_greedy_model/100/100/1",25077,27698.3,27639.9,ns,,,,,
"BM_greedy_model/1000/100/1",3165,221331,220843,ns,,,,,
"BM_greedy_model/10000/100/1",313,2.2524e+06,2.25093e+06,ns,,,,,
"BM_greedy_model/100000/100/1",24,2.99498e+07,2.99121e+07,ns,,,,,
"BM_greedy_model/10/1000/1",19171,36561.8,36542.9,ns,,,,,
"BM_greedy_model/100/1000/1",7716,93126.4,93057.3,ns,,,,,
"BM_greedy_model/1000/1000/1",1894,371867,371635,ns,,,,,
"BM_greedy_model/10000/1000/1",277,2.5053e+06,2.50368e+06,ns,,,,,
"BM_greedy_model/100000/1000/1",25,2.8779e+07,2.87429e+07,ns,,,,,
"BM_exact_model/10/10/4",258473,2729.84,2728.26,ns,,,,,
"BM_exact_model/100/10/4",26361,26688.7,26660.4,ns,,,,,
"BM_exact_model/1000/10/4",2650,266614,266043,ns,,,,,
"BM_exact_model/10000/10/4",242,2.9197e+06,2.91461e+06,ns,,,,,
"BM_exact_model/100000/10/4",18,3.80701e+07,3.79573e+07,ns,,,,,
"BM_exact_model/10/100/4",85372,8351.64,8334.14,ns,,,,,
"BM_exact_model/100/100/4",18911,37194.5,37118.3,ns,,,,,
"BM_exact_model/1000/100/4",2466,285306,284699,ns,,,,,
"BM_exact_model/10000/100/4",243,2.8981e+06,2.8929e+06,ns,,,,,
"BM_exact_model/100000/100/4",18,3.75011e+07,3.73872e+07,ns,,,,,
"BM_exact_model/10/1000/4",13041,53716.8,53602.5,ns,,,,,
"BM_exact_model/100/1000/4",6310,114386,114140,ns,,,,,
"BM_exact_model/1000/1000/4",1509,459299,457812,ns,,,,,
"BM_exact_model/10000/1000/4",216,3.20895e+06,3.20691e+06,ns,,,,,
"BM_exact_model/100000/1000/4",19,3.68225e+07,3.67776e+07,ns,,,,,
"BM_exact_model/10/10/1",272122,2553.99,2552.64,ns,,,,,
"BM_exact_model/100/10/1",26766,26051.7,26036.4,ns,,,,,
"BM_exact_model/1000/10/1",2584,265891,265735,ns,,,,,
"BM_exact_model/10000/10/1",233,2.97191e+06,2.97008e+06,ns,,,,,
"BM_exact_model/100000/10/1",18,3.9557e+07,3.95057e+07,ns,,,,,
"BM_exact_model/10/100/1",106928,6479.84,6476.08,ns,,,,,
"BM_exact_model/100/100/1",20068,34748.1,34726.4,ns,,,,,
"BM_exact_model/1000/100/1",2450,286752,286574,ns,,,,,
"BM_exact_model/10000/100/1",235,2.95353e+06,2.95146e+06,ns,,,,,
"BM_exact_model/100000/100/1",18,3.82656e+07,3.82153e+07,ns,,,,,
"BM_exact_model/10/1000/1",16931,40948.6,40922.3,ns,,,,,
"BM_exact_model/100/1000/1",6711,103611,103547,ns,,,,,
"BM_exact_model/1000/1000/1",1565,446322,446022,ns,,,,,
"BM_exact_model/10000/1000/1",221,3.19696e+06,3.19449e+06,ns,,,,,
"BM_exact_model/100000/1000/1",19,3.6526e+07,3.6483e+07,ns,,,,,
#+end_example

* Plotting results
First we put the results into =R=

#+begin_src R :exports both :results output :var datastr=bench_csv :session *R*
library(dplyr, warn.conflicts = FALSE)
library(tidyr)
dat <- read.csv(text = datastr) %>%
  select(name, cpu_time) %>%
  separate(name, c("method", "n", "l", "d"), "/") %>%
  mutate(n = as.numeric(n)) %>%
  mutate(cpu_time = cpu_time * 1e-9) %>%
  mutate_if(is.character, as.factor) %>%
  mutate(d = recode_factor(d, "4"="0.5", "1"="2")) %>%
  mutate(method = recode(method, BM_exact_model="Exact", BM_greedy_model="Greedy"))
summary(dat)
#+end_src

#+RESULTS:
: R> R> R> + . + R>     method         n             l        d         cpu_time
:  Exact :30   Min.   :    10   10  :20   0.5:30   Min.   :1.810e-06
:  Greedy:30   1st Qu.:   100   100 :20   2  :30   1st Qu.:3.609e-05
:              Median :  1000   1000:20            Median :2.754e-04
:              Mean   : 22222                      Mean   :7.342e-03
:              3rd Qu.: 10000                      3rd Qu.:2.956e-03
:              Max.   :100000                      Max.   :3.951e-02

Great! Now, we plot the data

#+begin_src R :exports both :results output file graphics :file tmp/res.pdf :session *R* :width 9 :height 3.5
library(ggplot2)
ggplot(dat, aes(n, cpu_time,
                colour = method,
                shape = method,
                linetype = l,
                group = interaction(method, l))) +
  geom_point() +
  geom_line() +
  facet_wrap(vars(d), labeller = "label_both") +
  scale_y_log10() +
  scale_x_log10() +
  theme_bw() +
  ylab("Time (s)") +
  xlab("Number of iterations") +
  scale_colour_grey(name = "Method") +
  scale_shape_discrete(name = "Method") +
  scale_linetype_discrete(name = "Linear segments")
#+end_src

#+RESULTS:
[[file:tmp/res.pdf]]
