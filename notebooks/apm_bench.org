#+TITLE: apm::apm benchmark

* Setup

We start by compiling the =tapm_benchmark= target in release mode. We
will first remove any build directory to make sure no artifacts exist.

#+begin_src sh :results output :exports both :cache yes
rm -rf tmp/build/release
meson setup --buildtype=release tmp/build/release ..
meson compile -C tmp/build/release apm_benchmark
#+end_src

#+RESULTS[2b8fbe894100a2656936a3a97055dbce23d75102]:
#+begin_example
The Meson build system
Version: 0.60.1
Source dir: /home/adbjesus/Workspace/Research/code/apm
Build dir: /home/adbjesus/Workspace/Research/code/apm/notebooks/tmp/build/release
Build type: native build
Project name: apm
Project version: 0.1
C++ compiler for the host machine: c++ (gcc 11.1.0 "c++ (GCC) 11.1.0")
C++ linker for the host machine: c++ ld.bfd 2.36.1
Host machine cpu family: x86_64
Host machine cpu: x86_64
Found pkg-config: /usr/bin/pkg-config (1.8.0)
Run-time dependency benchmark found: YES 1.6.0
Run-time dependency threads found: YES
Build targets in project: 2

apm 0.1

  User defined options
    buildtype: release

Found ninja-1.10.2 at /usr/bin/ninja
ninja: Entering directory `/home/adbjesus/Workspace/Research/code/apm/notebooks/tmp/build/release'
[1/2] Compiling C++ object apm_benchmark.p/bench_apm_benchmark.cpp.o
[2/2] Linking target apm_benchmark
#+end_example


* Run benchmark

All looks good, so we move on to running the benchmark. Since we want
our output in csv for later processing we use the
=--benchmark_format=csv= flag.

#+name: bench_csv
#+begin_src sh :results output :exports both :cache yes
./tmp/build/release/apm_benchmark --benchmark_format=csv
#+end_src

#+RESULTS[9ee258f2a64ce6787a423c612c0306ff173d2c7a]: bench_csv
#+begin_example
name,iterations,real_time,cpu_time,time_unit,bytes_per_second,items_per_second,label,error_occurred,error_message
"BM_greedy_model/10/10/4",367873,1893.73,1892.77,ns,,,,,
"BM_greedy_model/100/10/4",36043,19265.8,19253.8,ns,,,,,
"BM_greedy_model/1000/10/4",3457,201532,201412,ns,,,,,
"BM_greedy_model/10000/10/4",302,2.29082e+06,2.28944e+06,ns,,,,,
"BM_greedy_model/100000/10/4",23,3.10049e+07,3.09656e+07,ns,,,,,
"BM_greedy_model/10/100/4",117459,5894.89,5882.96,ns,,,,,
"BM_greedy_model/100/100/4",24076,29104.9,29058.1,ns,,,,,
"BM_greedy_model/1000/100/4",3248,217170,217074,ns,,,,,
"BM_greedy_model/10000/100/4",289,2.41912e+06,2.41673e+06,ns,,,,,
"BM_greedy_model/100000/100/4",21,2.99957e+07,2.99576e+07,ns,,,,,
"BM_greedy_model/10/1000/4",17634,39647.6,39627.5,ns,,,,,
"BM_greedy_model/100/1000/4",7757,92328.5,92273.7,ns,,,,,
"BM_greedy_model/1000/1000/4",1941,359116,358911,ns,,,,,
"BM_greedy_model/10000/1000/4",276,2.54499e+06,2.5436e+06,ns,,,,,
"BM_greedy_model/100000/1000/4",24,2.89749e+07,2.89397e+07,ns,,,,,
"BM_greedy_model/10/10/1",379591,1823.57,1822.7,ns,,,,,
"BM_greedy_model/100/10/1",34971,19929.8,19919.1,ns,,,,,
"BM_greedy_model/1000/10/1",3328,209684,209570,ns,,,,,
"BM_greedy_model/10000/10/1",298,2.35446e+06,2.35315e+06,ns,,,,,
"BM_greedy_model/100000/10/1",23,3.10881e+07,3.10527e+07,ns,,,,,
"BM_greedy_model/10/100/1",136904,5228.17,5225.73,ns,,,,,
"BM_greedy_model/100/100/1",25044,28034.2,28015.3,ns,,,,,
"BM_greedy_model/1000/100/1",3158,224189,224052,ns,,,,,
"BM_greedy_model/10000/100/1",310,2.27865e+06,2.27734e+06,ns,,,,,
"BM_greedy_model/100000/100/1",23,3.00819e+07,3.00473e+07,ns,,,,,
"BM_greedy_model/10/1000/1",19125,36852.4,36730.5,ns,,,,,
"BM_greedy_model/100/1000/1",7709,92519.5,92371.1,ns,,,,,
"BM_greedy_model/1000/1000/1",1849,380903,380301,ns,,,,,
"BM_greedy_model/10000/1000/1",276,2.54275e+06,2.54071e+06,ns,,,,,
"BM_greedy_model/100000/1000/1",24,2.94072e+07,2.93705e+07,ns,,,,,
"BM_exact_model/10/10/4",238273,2878.74,2877.4,ns,,,,,
"BM_exact_model/100/10/4",25593,27229.3,27214.9,ns,,,,,
"BM_exact_model/1000/10/4",2584,272039,271876,ns,,,,,
"BM_exact_model/10000/10/4",239,2.96991e+06,2.96784e+06,ns,,,,,
"BM_exact_model/100000/10/4",18,4.00415e+07,3.99585e+07,ns,,,,,
"BM_exact_model/10/100/4",77782,9151.04,9133.73,ns,,,,,
"BM_exact_model/100/100/4",18601,37718,37665.4,ns,,,,,
"BM_exact_model/1000/100/4",2421,293160,292983,ns,,,,,
"BM_exact_model/10000/100/4",239,2.93713e+06,2.93562e+06,ns,,,,,
"BM_exact_model/100000/100/4",18,3.86927e+07,3.86161e+07,ns,,,,,
"BM_exact_model/10/1000/4",11048,62238.8,62181.9,ns,,,,,
"BM_exact_model/100/1000/4",6007,117645,117580,ns,,,,,
"BM_exact_model/1000/1000/4",1570,450630,450324,ns,,,,,
"BM_exact_model/10000/1000/4",213,3.2792e+06,3.27712e+06,ns,,,,,
"BM_exact_model/100000/1000/4",19,3.68719e+07,3.68297e+07,ns,,,,,
"BM_exact_model/10/10/1",268911,2601.8,2600.6,ns,,,,,
"BM_exact_model/100/10/1",26359,26323.1,26309.6,ns,,,,,
"BM_exact_model/1000/10/1",2442,278631,278457,ns,,,,,
"BM_exact_model/10000/10/1",229,3.02219e+06,3.02054e+06,ns,,,,,
"BM_exact_model/100000/10/1",18,3.95582e+07,3.95105e+07,ns,,,,,
"BM_exact_model/10/100/1",106017,6451.88,6448.88,ns,,,,,
"BM_exact_model/100/100/1",19670,35165.2,35147.2,ns,,,,,
"BM_exact_model/1000/100/1",2382,290194,290036,ns,,,,,
"BM_exact_model/10000/100/1",233,2.9191e+06,2.91757e+06,ns,,,,,
"BM_exact_model/100000/100/1",18,3.80675e+07,3.80221e+07,ns,,,,,
"BM_exact_model/10/1000/1",17336,40892.6,40872.6,ns,,,,,
"BM_exact_model/100/1000/1",6722,104102,104045,ns,,,,,
"BM_exact_model/1000/1000/1",1363,448604,448331,ns,,,,,
"BM_exact_model/10000/1000/1",214,3.26146e+06,3.25933e+06,ns,,,,,
"BM_exact_model/100000/1000/1",19,3.71113e+07,3.70667e+07,ns,,,,,
#+end_example

* Plotting results
First we put the results into =R=

#+begin_src R :exports both :results output :var datastr=bench_csv :session *R*
library(dplyr, warn.conflicts = FALSE)
library(tidyr)
dat <- read.csv(text = datastr) %>%
  select(name, cpu_time) %>%
  separate(name, c("method", "n", "l", "d"), "/") %>%
  mutate(n = as.numeric(n)) %>%
  mutate(cpu_time = cpu_time * 1e-9) %>%
  mutate_if(is.character, as.factor) %>%
  mutate(d = recode_factor(d, "4"="0.5", "1"="2")) %>%
  mutate(method = recode(method, BM_exact_model="Exact", BM_greedy_model="Greedy"))
summary(dat)
#+end_src

#+RESULTS:
: R> R> R> + . + R>     method         n             l        d         cpu_time
:  Exact :30   Min.   :    10   10  :20   0.5:30   Min.   :1.820e-06
:  Greedy:30   1st Qu.:   100   100 :20   2  :30   1st Qu.:3.633e-05
:              Median :  1000   1000:20            Median :2.842e-04
:              Mean   : 22222                      Mean   :7.460e-03
:              3rd Qu.: 10000                      3rd Qu.:2.981e-03
:              Max.   :100000                      Max.   :3.996e-02

Great! Now, we plot the data

#+begin_src R :exports both :results output file graphics :file tmp/res.pdf :session *R* :width 9 :height 3.5
library(ggplot2)
ggplot(dat, aes(n, cpu_time,
                colour = method,
                shape = method,
                linetype = l,
                group = interaction(method, l))) +
  geom_point() +
  geom_line() +
  facet_wrap(vars(d), labeller = "label_both") +
  scale_y_log10() +
  scale_x_log10() +
  theme_bw() +
  ylab("Time (s)") +
  xlab("Number of iterations") +
  scale_colour_grey(name = "Method") +
  scale_shape_discrete(name = "Method") +
  scale_linetype_discrete(name = "Linear segments")
#+end_src

#+RESULTS:
[[file:tmp/res.pdf]]
